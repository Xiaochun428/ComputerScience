(* question1 (a) val all_except_option = fn : string * string list -> string list option  *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2
fun all_except_option (s,L) =    
    let fun q1_helper (s,L) =
	    case(s,L)of
		(_,[]) => []
	      | (s,L1::L') => if same_string(s,L1) then L' else L1::(q1_helper(s,L'))
    in case L of
	   [] => NONE
	 | b::c => if (q1_helper(s,L))=L then NONE else SOME(q1_helper(s,L)) 
    end


(* question1 (b) val get_substitutions1 = fn : string list list * string -> string list *)
fun get_substitutions1 (LL,s) =
    let fun q1_helper (L,s) =
	    case(L,s)of
		([],_) => []
	      | (L1::L',s) => if same_string(s,L1) then L' else L1::(q1_helper(L',s))
    in case (LL,s) of
	   ([],s) => []
	 | (LL1::LL',s) => if q1_helper(LL1,s)=LL1
			   then get_substitutions1(LL',s)
			   else q1_helper(LL1,s)@get_substitutions1(LL',s)
    end

	
(*question1 (c) Write a function get_substitutions2, which is like get_substitutions1 except it uses a tail-recursive local helper function. *)

fun get_substitutions2 (LL,s) =
    let fun h2 (LL,s,ys)=
	    let fun q1_helper (L,s) =
		    case(L,s)of
			([],_) => []
		      | (L1::L',s) => if same_string(s,L1) then L' else L1::(q1_helper(L',s))
	    in case (LL,s,ys) of
		   ([],s,ys) => ys
		 | (LL1::LL',s,ys) => if q1_helper(LL1,s)=LL1
				      then h2(LL',s,ys)
				      else h2(LL',s,ys@q1_helper(LL1,s))
	    end
    in h2(LL,s,[])
    end

(* question1 (d) type {first:string,middle:string,last:string} list val similar_names = 
fn : string list list * {first:string, last:string, middle:string} -> 
{first:string, last:string, middle:string} list *)

fun similar_names (LL,r) = 
    let fun helper (L,r) =
	    case (L,r) of
		([],{first=x,middle=y,last=z}) => []
	      | (L1::L',{first=x,middle=y,last=z}) => {first=L1,last=z,middle=y}::helper(L',r)
    in case (LL,r) of
	   ([], {first=x,middle=y,last=z}) => [{first=x,last=z,middle=y}]
	 | (LL1::LL',{first=x,middle=y,last=z}) => {first=x,last=z,middle=y}::helper(get_substitutions2(LL,x),r)
    end
	
(* question2 (a) *)
	
datatype suit = Clubs
	      | Diamonds
	      | Hearts
	      | Spades
		    
datatype rank = Jack
	      | Queen
	      | King
	      | Ace
	      | Num of int
			   
type card = suit * rank

datatype color = Red
	       | Black
		     
datatype move = Discard of card
	      | Draw

exception IllegalMove
	      
fun card_color (s,r) =
    case (s,r) of
	(Hearts,r) => Red
      | (Diamonds,r) => Red
      | (_,r) => Black

(* question 2 (b) *)
fun card_value (s,r) =
    case (s,r) of
	(s,Ace) => 11
     |  (s,Num x)=> x
     | (s,_) => 10
		    
(* quesiton 2 (c)val remove_card = fn : card list * card * exn -> card list  *)
fun same_card(c1 : card, c2 : card)=
    c1=c2
	   
fun remove_card (cs,c,e) =				  
    case cs of
	[] => raise e
      | x::cs' => if same_card (x,c) then cs' else x :: remove_card(cs',c,e) 
	
(*question 2 (d)  val all_same_color = fn : card list -> bool *)
fun all_same_color cs =
    case cs of
	[] => true
      | _::[] => true
      | c1::(c2::cs') => (card_color(c1)=card_color(c2) andalso all_same_color(c2::cs')) 
			     
(*question 2 (e) val sum_cards = fn : card list -> int *)
fun sum_cards cs =
    let fun h1 (cs,sum) =	
	    case (cs,sum) of
		([],sum) => sum
	      | (c1::cs',sum) => h1(cs',card_value(c1)+sum)
    in h1(cs,0)
    end
	
(* question 2 (f) val score = fn : card list * int -> int  *)
fun score (cs,goal) =
    let
	val sum = sum_cards cs
	val preliminary_score  =
	    if sum > goal
	    then 3*(sum - goal)
	    else goal - sum
    in
	if all_same_color(cs)
	then preliminary_score div 2
	else preliminary_score
    end
	
(* question 2 (g) val officiate = fn : card list * move list * int -> int *)

fun officiate (cs,ms,g) =
    let fun h1(cs,ms,hc,g) =
	    case (cs,ms,hc,g) of
		([],ms,hc,g) => hc
	      | (cs,[],hc,g) => hc	    
	      | (c1::cs',Draw::ms',hc,g) => if sum_cards(c1::hc) > g
					    then c1::hc
					    else h1(cs',ms',c1::hc,g)
	      | (c1::cs',Discard(card)::ms',hc,g) => h1(cs,ms',remove_card(hc,card,IllegalMove),g)
						       
    in score(h1(cs,ms,[],g),g)
    end

fun similar_names1 (substitutions,name) =
    let 
        val {first=f, middle=m, last=l} = name
	fun make_names xs =
	    case xs of
		[] => []
	      | x::xs' => {first=x, middle=m, last=l}::(make_names(xs'))
    in
	name::make_names(get_substitutions2(substitutions,f))
    end
