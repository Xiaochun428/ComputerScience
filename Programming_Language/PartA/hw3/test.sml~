val x = 1
fun f y =
    let val x = y + 1
    in fn z => x + y + z
    end
val g = f 7
val z = g 4
fun filter (f,xs) =
    case xs of
	[] => []
      | x::xs => if f x
		 then x::(filter(f,xs))
		 else filter(f,xs)
fun greaterThanX x = fn y => y > x
fun noNegatives xs = filter(greaterThanX ~1, xs)

fun f g =
    let val x = 3
    in
	g 2
    end
val x= 4
fun h y = x + y
val z = f h
